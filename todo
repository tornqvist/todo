#!/usr/bin/env bash

number_re='^[0-9]+$'
empty_re='^\[\ \]'
done_re='^\[x\]'
unset_re='^\[-\]'
filled_re='^\[(x|-)\]'
any_re='^\[(x|-|\ )\]'
todo_file="$HOME/Documents/todo.txt"
help="
\033[1mUsage\033[0m: \033[36mtodo [option] <task>\033[0m

\033[1mOptions\033[0m:
 --add, -a        add a new todo
 --unset, -u      unset a todo
 --done, -x       mark todo as done
 --log, -l        list all done todos
 --help, -h       show this help text
 --verbose, -v    show meta information

\033[1mExamples\033[0m:
  \033[37m# Print all unfinished todos\033[0m
  todo

  \033[37m# Add a new todo\033[0m
  todo buy hammer @errand +renovation

  \033[37m# Mark a todo as done\033[0m
  todo -x 3

  \033[37m# Print all todos and include metadata\033[0m
  todo --verbose
"

# add a todo
# str -> i/o
function add() {
  writeln
  writeln `date +'%Y-%m-%d %T'`
  writeln "[ ] $@"
}

# write to end of file
# str -> i/o
function writeln() {
  echo "$@" >> $todo_file
}

# print warning
# str -> echo
function warn() {
  echo
  echo -e "\033[31m$1\033[0m"
  echo
  echo -e "\033[37mSee the instructions: \033[0mtodo --help"
}

# decorate str with colors and style
# str -> echo
function decorate() {
  local esc=$(printf '\033')
  local check="s/^\[.]\s*//g"
  local type="s/@[^ +]*/${esc}[0m${esc}[95m&${esc}[0m/g"
  local tag="s/\+[^ @]*/${esc}[0m${esc}[34m&${esc}[0m/g"
  local comment="s/^#.*/${esc}[37m&${esc}[0m/"
  local date="s/^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9].*/${esc}[37m&${esc}[0m/"
  echo -e "$1" | sed -e "$check;$type;$tag;$comment;$date"
}

# center string in terminal w/ optional delimiter
# str -> echo
function center() {
  local str=$1
  local cols=$((($(tput cols) - ${#str}) / 2))
  local col=0
  while [[ col -lt cols ]]; do
    ((col++))
    echo -en "\033[37m${2:-" "}\033[0m"
  done
  echo -n "$str"
  col=0
  while [[ col -lt cols ]]; do
    ((col++))
    echo -en "\033[37m${2:-" "}\033[0m"
  done
}

# print all undone todos
# () -> echo
function print() {
  echo
  local num=0
  local meta=""

  while read line; do
    if [[ "$line" =~ $empty_re ]]; then
      ((num++))
      if [ ! -z "$meta" ]; then echo; fi
      echo -en "\033[1m$num. "
      if [ "$verbose" == false ]; then echo -en "\033[0m"; fi
      echo -en $(decorate "$line")
      echo -e "\033[0m"
      if [ ! -z "$meta" ]; then
        local indent="  $(printf "%*s" ${#num})"
        echo -e "$meta" | sed "s/^/$indent/"
      fi
      meta=""
    elif [[ "$line" =~ $filled_re ]]; then
      meta=""
    elif [ "$verbose" == true ]; then
      if [[ ! -z "$meta" ]]; then meta="$meta\n$(decorate "$line")"
      else meta="$(decorate "$line")"; fi
    fi
  done < $todo_file
}

# print paginated set batch of done todos
# num -> echo
function log() {
  local todo=""
  local meta=""
  local num=0
  local last=$(($1 * 10))
  local first=$(($last - 10))

  while read line; do
    if [[ -z $line ]]; then continue; fi
    if [[ $line =~ $any_re ]]; then
      if [ $num -ge $last ]; then break; fi
      if [ $num -ge $first ] && [[ ! -z "$todo" ]]; then
        echo -e "$todo"
        if [ ! -z "$meta" ]; then echo -e "$meta"; fi
      fi
      if [[ "$line" =~ $done_re ]]; then
        ((num++))
        todo="\n \033[1m$(decorate "$line")\033[0m"
        meta=""
      else
        meta=""
        todo=""
      fi
    else
      if [[ ! -z "$meta" ]]; then meta=" $(decorate "$line")\n$meta"
      else meta=" $(decorate "$line")"; fi
    fi
  done < <(tail -r ${todo_file})

  if [[ ! -z "$todo" ]]; then
    echo -e "$todo"
    if [[ ! -z "$meta" ]]; then echo -e "$meta"; fi
  fi
}

# tick todo with given char
# (num, str) -> i/o
function tick() {
  local num=0
  local file=""
  local block=""

  while read line; do
    if [ -z "$line" ]; then
      # mirror blank lines
      file+="$block"$'\n'
      block=""
    elif [[ $line =~ $empty_re ]]; then
      ((num++))
      # match todo number and tick box
      if [ $num == $1 ]; then
        block="${block/$'\n'/ → `date +'%Y-%m-%d %T'`}"$'\n'
        block+="${line/[ ]/$2}"$'\n'
      else
        block+="$line"$'\n'
      fi;
    else
      # mirror meta data
      block+="$line"$'\n'
    fi;
  done < $todo_file

  #print to file
  echo "$(echo "$file$block")" > $todo_file
}

verbose=false
if [ $# -eq 0 ]; then
  # no args just prints
  print
else
  for arg in "$@"; do
    # just print help text if flagged with help
    if [ "$arg" == '--help' ] || [ "$arg" == '-h' ]; then
      echo -e "$help"
      exit 0
    fi;
  done

  unquoted=""
  capture=false && ! [[ "$1" =~ ^-{1,2}.+ ]] && capture=true

  index=0
  for arg in "$@"; do
    ((index++))
    next=$(($index + 1))

    # capture unqoted arguments as if invoked with add command
    if [ "$capture" == true ]; then
      if [[ $arg =~ ^-{1,2}.+ ]]; then
        # stop capturing and add on first flag
        add $unquoted
        capture=false
      else
        unquoted="$unquoted $arg"
        continue
      fi;
    fi;

    if [ "$arg" == '--verbose' ] || [ "$arg" == '-v' ]; then
      verbose=true
    elif [ "$arg" == '--log' ] || [ "$arg" == '-l' ]; then
      page=1
      log $page
      while read -rsn1 -p "$(echo -e "\n‣ Press q to quit or any other key to see more\r")" key; do
        if [ "$key" == 'q' ]; then exit 0; fi
        ((++page))
        delimiter=" " && [[ $(tput cols) -gt 80 ]] && delimiter="-"
        center " PAGE $page " $delimiter
        echo
        log $page
      done
    elif [ "$arg" == '--done' ] || [ "$arg" == '-x' ]; then
      # check that done command is followed by a number
      if [ $# -eq $index ] || ! [[ ${!next} =~ $number_re ]]; then
        warn 'You need to enter the number of a todo.'
      else
        tick ${!next} 'x'
      fi;
    elif [ "$arg" == '--unset' ] || [ "$arg" == '-u' ]; then
      # check that unset command is followed by a number
      if [ $# -eq $index ] || ! [[ ${!next} =~ $number_re ]]; then
        warn 'You need to enter the number of a todo.'
      else
        tick ${!next} '-'
      fi;
    elif [ "$arg" == '--add' ] || [ "$arg" == '-a' ]; then
      # check that an actual todo was provided
      if [ $# -eq $index ]; then
        warn 'You need to enter a todo.'
      else
        add ${!next}
      fi;
    fi;
  done

  if [ "$capture" == true ]; then
    add $unquoted
  fi;

  print
fi;
